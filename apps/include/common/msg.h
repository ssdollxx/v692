#ifndef MSG_H
#define MSG_H

#include "typedef.h"

enum {
//SYS_MSG_START_LINE
    MSG_0 = 0,
    MSG_1,
    MSG_2,
    MSG_3,
    MSG_4,
    MSG_5,
    MSG_6,
    MSG_7,
    MSG_8,
    MSG_9,
    MSG_VOL_UP,
    MSG_VOL_DOWN,
    MSG_VOL_KEY_UP,
    MSG_MUTE,
    MSG_POWER_ON,
    MSG_POWER_OFF,
    MSG_POWER_OFF_HOLD,
    MSG_POWER_KEY_UP,
    MSG_POWER_OFF_AUTO,
    MSG_UPDATA,
    MSG_UART_UPDATA,
    MSG_LOW_POWER,
    MSG_LOW_POWER_VOICE,

    //WORK_MODE
    MSG_CHANGE_WORKMODE,
    MSG_NEXT_WORKMODE,
    MSG_PRE_WORKMOD,
    MSG_LAST_WORKMOD,
    MSG_BACK_TO_BT,


    // UI MAIN
    MSG_ENTER_MENUMAIN,
    MSG_ENTER_SLEEP_MODE,
    MSG_APP_MAIN_MSGLIST,

    MSG_VOCAL_PP,

    MSG_DAC_CTL,
    MSG_EQ_MODE,
    MSG_ONE_SECOND,
    MSG_ACTIVE_TASK,
    MSG_VOL_UP_TWS,
    MSG_VOL_DN_TWS,
    MSG_EQ_MODE_TWS,

    MSG_FMTX_FREQ_SET,
    MSG_FMTX_FREQ_DOWN,
    MSG_FMTX_FREQ_UP,
    MSG_FMTX_FREQ_DOWN_CHECK,
    MSG_FMTX_FREQ_UP_CHECK,
    MSG_POWER_OFF_TWS,

    //MSG_MAIN_MAX，此消息前的消息发送到MAIN线程
    MSG_MAIN_MAX,
//SYS_MSG_END_LINE


//LIBS_MSG_START_LINE
    MSG_LIBS1 = 0x80,
    //解码器消息
    SYS_EVENT_BEGIN_DEC = 0xB0,
    SYS_EVENT_DEC_FR_END,
    SYS_EVENT_DEC_FF_END,
    SYS_EVENT_DEC_END,
    SYS_EVENT_DEC_DEVICE_ERR,

    SYS_EVENT_PLAY_SEL_END,
    MSG_EVENT_MAX,

    // SYS_EVENT_DEC_SET_END,
//LIBS_MSG_END_LINE


//TASK_MSG_START_LINE
    //TASK_MSG	:	BT
    MSG_BT_NEXT_FILE = 0x100,
    MSG_BT_PREV_FILE,
    MSG_BT_PP,
    MSG_BT_CALL_LAST_NO,
    MSG_BT_CALL_CONTROL,
    MSG_BT_CALL_REJECT,
    MSG_BT_CALL_HANGUP,
    MSG_BT_ANSWER_CALL,
    MSG_BT_SHUTTER,
    MSG_BT_RESET,
    MSG_BT_STACK_STATUS_CHANGE,
    MSG_TEST_HFP,
    MSG_DISCONNECT_ALL_LINK,
    MSG_BT_CONNECT_CTL,
    MSG_BT_HID_CTRL,
    MSG_BT_HID_TAKE_PIC,
    MSG_BT_MUSIC_EQ,
    MSG_BT_PAGE_SCAN,
    MSG_BT_SPP_UPDATA,
    MSG_DISP_MENU,///自动刷新界面
    MSG_BT_FAST_TEST,
    MSG_BT_TONE_CONN,
    MSG_BT_TONE_DISCONN,
    MSG_BT_TONE_RING,
    MSG_BT_TONE_PHONE_NUM,
    MSG_BT_PHONE_VOL,
    MSG_BT_REC_EXIT,

    MSG_BT_SEARCH_DEVICE,
    MSG_BT_TWS_EQ,
    MSG_BT_SYNC_TWS_EQ,
    MSG_BT_TWS_DELETE_ADDR,
    MSG_BT_TRAIN_DEVICE,
    MSG_BT_TRAIN_SCAN_DEVICE,
    MSG_BT_TWS_TEST,
    MSG_BT_TWS_CONNECT_CTL,
    MSG_BT_TWS_EQ_SYNC,
    MSG_BT_TWS_VOL_SYNC,/*普通音量同步消息*/
    MSG_BT_TWS_VOL_KEY,	/*按键音量同步消息*/
    MSG_BT_TWS_ALL_DELETE_ADDR,
    MSG_BT_TWS_STATE,
    MSG_BT_TWS_VOL_KEY_UP,
    MSG_BT_TONE_LINEIN,
    MSG_BT_TWS_LINEIN_START,
    MSG_BT_TWS_LINEIN_STOP,

    MSG_BT_UPDATA_START,
    MSG_BT_UPDATA_END,
    MSG_BT_BLE_TEST,
    MSG_BT_FCC,
    MSG_BT_MAX,//蓝牙最大消息，为了自动测试时候的消息错误检测，下同

    //TASK_MSG	:	MSUIC
    MSG_MUSIC_NEXT_FILE = 0x200,
    MSG_MUSIC_PREV_FILE,
    MSG_MUSIC_PP,
    MSG_MUSIC_PLAY,
    MSG_MUSIC_PAUSE,
    MSG_MUSIC_STOP,
    MSG_MUSIC_FF,
    MSG_MUSIC_FR,
    MSG_MUSIC_FFR_DONE,
    MSG_MUSIC_RPT,
    MSG_MUSIC_EQ,
    MSG_MUSIC_U_SD,
    MSG_MUSIC_DEL_FILE,
    MSG_MUSIC_SPC_FILE,
    MSG_MUSIC_AB_RPT,
    MSG_MUSIC_PLAY_SN,
    MSG_MUSIC_SET_PITCH,
    MSG_MUSIC_SET_SPEED,
    MSG_MUSIC_PREV_FOLDER,
    MSG_MUSIC_NEXT_FOLDER,
    MSG_MUSIC_FF_KEY_UP,
    MSG_MUSIC_FR_KEY_UP,
    MSG_MUSIC_MAX,//音乐最大消息

    //TASK_MSG	:	FM
    MSG_FM_SCAN_ALL_INIT = 0x300,
    MSG_FM_INIT,
    MSG_FM_SCAN_ALL,
    MSG_FM_PREV_STATION,
    MSG_FM_NEXT_STATION,
    MSG_FM_SCAN_ALL_DOWN,
    MSG_FM_SCAN_ALL_UP,
    MSG_FM_PREV_STEP,
    MSG_FM_NEXT_STEP,
    MSG_SRC,
    MSG_FM_SELECT_CHANNEL,
    MSG_FM_PP,
    MSG_FM_DEL_CHANNEL,
    MSG_FM_SAVE_CHANNEL,
    MSG_FM_SELECT_FREQ,
    MSG_FM_TEST1,
    MSG_FM_TEST2,
    MSG_FM_TEST3,
    MSG_FM_MAX,//FM最大消息

    //TASK_MSG	:	AUX
    MSG_AUX_INIT = 0x400,
    MSG_AUX_MUTE,
    MSG_AUX_ONLINE,
    MSG_AUX_OFFLINE,


    MSG_AUX_MAX,//AUX最大消息


    //TASK_MSG	:	PC
    MSG_PC_MODE_INIT = 0x500,
    MSG_PC_CARD_READER,
    MSG_PC_SPK_MUTE,
    MSG_PC_SPK_UNMUTE,
    MSG_PC_SPK_VOL,
    MSG_PC_MUTE,
    MSG_PC_VOL_UP,
    MSG_PC_VOL_DOWN,
    MSG_PC_PP,
    MSG_PC_PLAY_NEXT,
    MSG_PC_PLAY_PREV,
    MSG_PC_UPDATA,
    MSG_PC_SPK_PP,

    MSG_PC_MAX,//PC最大消息

    //TASK_MSG	:	RTC
    MSG_RTC_INIT = 0x600,
    MSG_RTC_SETTING,
    MSG_ALM_SETTING,
    MSG_ALM_SW,
    MSG_ALM_ON,
    MSG_RTC_PLUS,
    MSG_RTC_MINUS,
    MSG_RTC_POWER_DOWN,
    MSG_ALM_UP,

    MSG_RTC_MAX,//RTC最大消息

    //TASK_ECHO and ENCODE
    MSG_REC_INIT = 0x700,
    MSG_REC_START,
    MSG_REC_STOP,
    MSG_REC_PP,
    MSG_REC_DEL,
    MSG_ENCODE_ERR,
    MSG_REC_PLAY,
    MSG_REC_PLAY_STOP,
    MSG_REC_PLAY_PP,
    MSG_REC_PLAY_END,
    MSG_REC_PLAY_ERR,
    MSG_REC_INPUT_ERR,
    MSG_REC_OUTPUT_ERR,

    MSG_ECHO_START = 0x750,
    MSG_ECHO_STOP,

    MSG_ECHO_DEEP_SET,
    MSG_ECHO_PITCH_SET,
    MSG_ECHO_MIC_VOL_SET,
    MSG_ECHO_MUSIC_VOL_SET,
    MSG_ECHO_DECAY_SET,
    MSG_ECHO_MUSIC_VOL_SW,  //open or close music vol
    MSG_ECHO_SW,       //open or close echo

    //TASK_MSG	:	IDLE
    MSG_IDLE_MODE = 0x900,
    MSG_IDLE_CTL,
    MSG_ENTER_IDLE_TASK,
    MSG_EXIT_IDLE_TASK,
    MSG_IDLE_CNT,
    MSG_IDLE_CNT_LONG,
    MSG_IDLE_CNT_HOLD,
    MSG_IDLE_CNT_UP,

    MSG_IDLE_MAX,//IDLE最大消息

    //TASK_MSG	:	COMMON
    MSG_PROMPT_PLAY = 0xA00,
    MSG_HALF_SECOND,
    MSG_DAC_ON,
    MSG_DAC_OFF,
    MSG_AUTOMUTE_ON,
    MSG_AUTOMUTE_OFF,
    MSG_INPUT_NUMBER_END,
    MSG_INPUT_TIMEOUT,
//LIBS_MSG_END_LINE


    MSG_DEV_DETECT,

    MSG_CACHE_ONLINE,
    MSG_CACHE_OFFLINE,
    MSG_HUSB_ONLINE,
    MSG_HUSB_OFFLINE,
    MSG_SD0_ONLINE,
    MSG_SD0_OFFLINE,
    MSG_SD1_ONLINE,
    MSG_SD1_OFFLINE,

    MSG_SUSB_ONLINE,
    MSG_SUSB_OFFLINE,

    MSG_PC_ONLINE,
    MSG_PC_OFFLINE,

    MSG_SD0_MOUNT_SUCC,
    MSG_SD1_MOUNT_SUCC,
    MSG_USB_MOUNT_SUCC,

    MSG_COMMON_MAX,//common最大消息

    MSG_CLEAN_ALL_MSG = 0x0ffe,
    NO_MSG = 0x0fff,
};

enum {
    MSG_NO_ERROR = 0,
    MSG_EVENT_EXIST = -1,
    MSG_NOT_EVENT = -2,
    MSG_EVENT_PARAM_ERROR = -3,
    MSG_BUF_NOT_ENOUGH = -4,
};

//DEV_ONLINE
#define MSG_DEV_HANDLE		0x0FFFFFFFUL
#define MSG_DEV_MSG			0xF0000000UL

#define MSG_DEV_ONLINE		0x50000000UL
#define MSG_DEV_OFFLINE		0xA0000000UL


#define MAX_POOL			128
#define MAX_EVENT			32

#define NO_EVENT			0xffff

#define EVENT_PC_ONLINE		0
#define EVENT_PC_OFFLINE	1
#define EVENT_HUSB_ONLINE	2
#define EVENT_HUSB_OFFLINE	3
#define EVENT_SD0_ONLINE	4
#define EVENT_SD0_OFFLINE	5
#define EVENT_SD1_ONLINE 	6
#define EVENT_SD1_OFFLINE	7
#define EVENT_SUSB_ONLINE	8
#define EVENT_SUSB_OFFLINE	9
#define EVENT_AUTOMUTE_ON	10
#define EVENT_AUTOMUTE_OFF	11
#define EVENT_SD0_ON_SUCC   12
#define EVENT_SD1_ON_SUCC   13
#define EVENT_USB_ON_SUCC    14
#define EVENT_15			15
#define EVENT_16			16
#define EVENT_17			17
#define EVENT_18			18
#define EVENT_19			19
#define EVENT_20			20
#define EVENT_21			21
#define EVENT_22			22
#define EVENT_23			23
#define EVENT_24			24
#define EVENT_25			25
#define EVENT_26			26
#define EVENT_27			27
#define EVENT_ACTIVE_TASK   28
#define EVENT_ONE_SECOND	29
#define EVENT_DEV_DETECT	30
#define EVENT_HALF_SECOND	31




bool get_event_status(u32 event);
int task_get_msg(u16 timeout, int len, int *msg);
int task_post_msg(char *name, int argc, ...);
int task_post_event(char *name, int argc, ...);
void task_message_init();
void task_clear_all_message(void);
#endif



